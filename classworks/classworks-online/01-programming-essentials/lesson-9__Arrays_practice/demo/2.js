/**
 * Map и Set
 *
 * https://learn.javascript.ru/map-set
 * */

/**
 * Map – это коллекция ключ/значение, как и Object. Но основное отличие в том, что Map позволяет использовать ключи любого типа.
 *
 * Методы и свойства:
 *
 * new Map() – создаёт коллекцию.
 * map.set(key, value) – записывает по ключу key значение value.
 * map.get(key) – возвращает значение по ключу или undefined, если ключ key отсутствует.
 * map.has(key) – возвращает true, если ключ key присутствует в коллекции, иначе false.
 * map.delete(key) – удаляет элемент по ключу key.
 * map.clear() – очищает коллекцию от всех элементов.
 * map.size – возвращает текущее количество элементов.
 *
 * */

let map = new Map();

map.set("1", "str1");    // строка в качестве ключа
map.set(1, "num1");      // цифра как ключ
map.set(true, "bool1");  // булево значение как ключ

// помните, обычный объект Object приводит ключи к строкам?
// Map сохраняет тип ключей, так что в этом случае сохранится 2 разных значения:

// console.log(map); // 3
// console.log(map.get(1)); // "num1"
// console.log(map.get("1")); // "str1"
// console.log(map.size); // 3



// let recipeMap = new Map([
// 	["огурец", 500],
// 	["помидор", 350],
// 	["лук",    50]
// ]);
//
// console.log( recipeMap );

// перебор по ключам (овощи)
// for (let vegetable of recipeMap.keys()) {
// 	console.log(vegetable); // огурец, помидор, лук
// }

// // перебор по значениям (числа)
// for (let amount of recipeMap.values()) {
// 	console.log(amount); // 500, 350, 50
// }
//
// // перебор по элементам в формате [ключ, значение]
// for (let entry of recipeMap) { // то же самое, что и recipeMap.entries()
// 	console.log(entry); // огурец,500 (и так далее)
// }


/**
 *
 * Set
 * Объект Set – это особый вид коллекции: «множество» значений (без ключей), где каждое значение может появляться только один раз.
 *
 * Его основные методы это:
 *
 * new Set(iterable) – создаёт Set, и если в качестве аргумента был предоставлен итерируемый объект (обычно это массив), то копирует его значения в новый Set.
 * set.add(value) – добавляет значение (если оно уже есть, то ничего не делает), возвращает тот же объект set.
 * set.delete(value) – удаляет значение, возвращает true, если value было в множестве на момент вызова, иначе false.
 * set.has(value) – возвращает true, если значение присутствует в множестве, иначе false.
 * set.clear() – удаляет все имеющиеся значения.
 * set.size – возвращает количество элементов в множестве.
 * Основная «изюминка» – это то, что при повторных вызовах set.add() с одним и тем же значением ничего не происходит, за счёт этого как раз и получается, что каждое значение появляется один раз.
 *
 * Например, мы ожидаем посетителей, и нам необходимо составить их список. Но повторные визиты не должны приводить к дубликатам. Каждый посетитель должен появиться в списке только один раз.
 *
 * Множество Set – как раз то, что нужно для этого:
 *
 * */

let colection = new Set();
//
let john = { name: "John" };
let pete = { name: "Pete" };
let mary = { name: "Mary" };
let mary1 = { name: "Mary" };
//
// Set(4) {
// 	{ name: 'John' },
// 	{ name: 'Pete' },
// 	{ name: 'Mary' },
// 	{ name: 'Mary' }
// }


// let john = [1, 6];
// let pete = [1, 6];
// let mary = [1, 6];
// let mary1 = [1, 6];
//Set(4) { [ 1, 6 ], [ 1, 6 ], [ 1, 6 ], [ 1, 6 ] }

// let john = 1;
// let pete = 1;
// let mary = 1;
// let mary1 = 1;
//Set(1) { 1 }

// let john = 'john';
// let pete = 'john';
// let mary = 'mary';
// let mary1 = 'mary1';
//Set(3) { 'john', 'mary', 'mary1' }

// // считаем гостей, некоторые приходят несколько раз
colection.add(john);
colection.add(pete);
colection.add(mary);
colection.add(mary1);

// console.log( colection );
//
// // set хранит только 3 уникальных значения
// console.log(colection.size); // 3
//
// for (let user of colection) {
// 	console.log(user.name); // John (потом Pete и Mary)
// }

// let set = new Set(["апельсин", "яблоко", "банан"]);
//
// for (let value of set) console.log(value);

// то же самое с forEach:
// set.forEach((value, valueAgain, set) => {
// 	console.log(value);
// });


/**
 * Map – коллекция пар ключ-значение.
 *
 * Методы и свойства:
 *
 * new Map([iterable]) – создаёт коллекцию, можно указать перебираемый объект (обычно массив) из пар [ключ,значение] для инициализации.
 * map.set(key, value) – записывает по ключу key значение value.
 * map.get(key) – возвращает значение по ключу или undefined, если ключ key отсутствует.
 * map.has(key) – возвращает true, если ключ key присутствует в коллекции, иначе false.
 * map.delete(key) – удаляет элемент по ключу key.
 * map.clear() – очищает коллекцию от всех элементов.
 * map.size – возвращает текущее количество элементов.
 * Отличия от обычного объекта Object:
 *
 * Что угодно может быть ключом, в том числе и объекты.
 * Есть дополнительные методы, свойство size.
 * Set – коллекция уникальных значений, так называемое «множество».
 *
 * Методы и свойства:
 *
 * new Set([iterable]) – создаёт Set, можно указать перебираемый объект со значениями для инициализации.
 * set.add(value) – добавляет значение (если оно уже есть, то ничего не делает), возвращает тот же объект set.
 * set.delete(value) – удаляет значение, возвращает true если value было в множестве на момент вызова, иначе false.
 * set.has(value) – возвращает true, если значение присутствует в множестве, иначе false.
 * set.clear() – удаляет все имеющиеся значения.
 * set.size – возвращает количество элементов в множестве.
 * Перебор Map и Set всегда осуществляется в порядке добавления элементов, так что нельзя сказать, что это – неупорядоченные коллекции, но поменять порядок элементов или получить элемент напрямую по его номеру нельзя.
 *
 *
 * */